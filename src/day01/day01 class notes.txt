Java Bootcamp Day01

Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. String vs StringBuilder vs StringBuffer
		6. Loops: for & while
		7. Array
		8. for each loop
		9. Custom Methods
		10. Method Overloading
		11. Constructor
		12. Class & Objects
		13. Static vs Instance
		14. Import Statements
		15. Access Modifiers
		16. OOP Encapsulations
		17. OOP Inheritance
		18. Method Overriding
        19. Final keyword
        20. OOP Abstraction
        21. Abstract Class vs Interface
        22. OOP Polymorphism
        23. Reference Type Castings: Upcasting vs DownCasting
        24. Exceptions: checked & unchecked
        25. Exception Handling
        26. final vs finally vs finalize
        27. garbage collection & garbage collector
        28. Collections: List, Set, Queue
        29. Iterable & Iterator
        30. Maps


1. Primitives: int, double, char, boolean
			   byte, short, int long, float, double
			   char, boolean

2. Primitive Type Castings: Implicit vs Explicit
			
			1. implicit casting: casting smaller primitive type to larger 
			2. explicit casting: casting larage primitive type to smaller (Explicitly)


3. Wrapper class: the objects that represents the primitives


4. String: immutable version of char sequences
		
		"Cydeo "
		 012345

		 'Z' != 'z'

		 Methods: charAt, length, trim, lower & upper case, replace, substring, equals, equalsIgnoreCase, split, toCharArray


5. StringBuilder vs StringBuffer: mutable char sequences
		
		StringBuilder: Not Synchronized

		String Buffer: Synchronized



6. Loops: repeated action
		
		for: if the number of repetition is known
			for(init; condition; iterator){
				statements
			}

		while: to repeat for unknown number of times
			while(condition){
				statements
			}


	break: exits the loop or switch

	continue: jumps to the next iteration of loop

	return: exits the current methods


7. Array: supports primitives & non-primitives
		  size is fixed
		  has index
		  can be multi-dimensional


8. for each loop: number of iteratiosn & iteration orders are fixed
				  There must be a data structure


9. Custom Methods: Function
				   grouping a series of code fragments that can perform a specific task
				   improves the reusability of codes


			   public static  void/anyDataType   methodName(Parameters){
			   		code fragments that can perform the task
			   }


10. Method Overloading: multiple methods having same method names in a class

						PARAMETERS MUST BE DIFFERENT


11. Constructor: every class must have constructor
				 used for creating objects
				 execution depedns on the object


			 In my framework:

			 		BasePage
			 			public BasePage(){
			 				PageFactory.intiElement(driver, this);
			 			}

			 		
			 		HomePage extends BasePage

			 		@FindBy


	 		this()
	 		super()


come back at 2:15 PM US EST















